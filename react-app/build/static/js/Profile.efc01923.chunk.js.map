{"version":3,"sources":["store/schemas.js","store/users/actions.js","utils/isAlphanumeric.js","utils/isValidEmail.js","components/Avatar.jsx","utils/parseNameInitials.js","containers/profile/UserName.jsx","containers/profile/FullName.jsx","containers/profile/Email.jsx","containers/profile/DailyCaloriesTarget.jsx","containers/profile/index.jsx"],"names":["usersScema","schema","Entity","idAttribute","USERS","USERS_ARRAY","createUser","params","CALL_API","types","ActionTypes","endpoint","method","body","pick","meta","getUsers","normalize","data","Schemas","updateUser","deleteUser","isAlphanumeric","str","test","String","isValidEmail","email","toLowerCase","Wrapper","styled","div","Avatar","name","className","substring","toUpperCase","UserName","value","onChange","error","FormControl","fullWidth","InputLabel","Input","FormHelperText","FullName","Email","type","DailyCaloriesTarget","getCredential","user","Profile","state","isBusy","fullName","props","userName","dailyCaloriesTarget","errors","fetchCurrentUser","getUserInfo","onSuccess","setState","onFailure","setSnackbar","handleInputChange","event","target","prevState","handleSubmit","preventDefault","isUserNameAlphanumeric","emailValid","id","_id","message","this","classNames","blur","onSubmit","Button","color","variant","disabled","React","PureComponent","connect","auth"],"mappings":"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","file":"static/js/Profile.efc01923.chunk.js","sourcesContent":["import { schema } from 'normalizr';\n\nconst usersScema = new schema.Entity('users', {}, { idAttribute: '_id' });\n\nexport default {\n  USERS: usersScema,\n  USERS_ARRAY: [usersScema]\n};\n","import { pick } from 'ramda';\nimport { CALL_API } from '../middlewares/api';\nimport Schemas from '../schemas';\nimport * as ActionTypes from './types';\n\n/**\n * Create User\n */\nexport const createUser = params => ({\n  [CALL_API]: {\n    types: [\n      ActionTypes.CREATE_USER_REQUEST,\n      ActionTypes.CREATE_USER_SUCCESS,\n      ActionTypes.CREATE_USER_FAILURE\n    ],\n    endpoint: 'user',\n    method: 'POST',\n    body: pick(['userName', 'email', 'fullName', 'role', 'password'])(params || {}),\n    meta: pick(['onSuccess', 'onFailure'])(params || {})\n  }\n});\n\n/**\n * Get Users\n */\nexport const getUsers = params => ({\n  [CALL_API]: {\n    types: [\n      ActionTypes.GET_USERS_REQUEST,\n      ActionTypes.GET_USERS_SUCCESS,\n      ActionTypes.GET_USERS_FAILURE\n    ],\n    endpoint: 'users',\n    body: pick(['id'])(params || {}),\n    meta: pick(['onSuccess', 'onFailure'])(params || {}),\n    schema: params.normalize\n      ? {\n          data: Schemas.USERS_ARRAY\n        }\n      : null\n  },\n  normalize: params.normalize\n});\n\n/**\n * Update user\n */\nexport const updateUser = params => ({\n  [CALL_API]: {\n    types: [ActionTypes.UPDATE_REQUEST, ActionTypes.UPDATE_SUCCESS, ActionTypes.UPDATE_FAILURE],\n    endpoint: 'user',\n    method: 'PATCH',\n    body: pick(['id', 'userName', 'email', 'fullName', 'dailyCaloriesTarget', 'role', 'password'])(\n      params || {}\n    ),\n    meta: pick(['onSuccess', 'onFailure'])(params || {})\n  }\n});\n\n/**\n * Delete user\n */\nexport const deleteUser = params => ({\n  [CALL_API]: {\n    types: [ActionTypes.DELETE_REQUEST, ActionTypes.DELETE_SUCCESS, ActionTypes.DELETE_FAILURE],\n    endpoint: 'user',\n    method: 'DELETE',\n    body: pick(['id'])(params || {}),\n    meta: pick(['onSuccess', 'onFailure'])(params || {})\n  }\n});\n","const isAlphanumeric = str => {\n  const re = /^[a-zA-Z0-9]+$/;\n  return re.test(String(str));\n};\n\nexport default isAlphanumeric;\n","const isValidEmail = email => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\n\nexport default isValidEmail;\n","import React from 'react';\nimport styled from 'styled-components';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport parseNameInitials from '../utils/parseNameInitials';\n\nconst Wrapper = styled.div`\n  width: 100px;\n  height: 100px;\n\n  .shadow {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    background: rgba(0, 0, 0, 0.05);\n\n    > span {\n      font-size: 1.5rem;\n    }\n  }\n`;\n\nconst Avatar = ({ name, className }) => (\n  <Wrapper className={className || ''}>\n    <div className=\"shadow\">\n      {!!name ? <span>{parseNameInitials(name)}</span> : <AccountCircle />}\n    </div>\n  </Wrapper>\n);\n\nexport default Avatar;\n","export default fullName => (fullName || '').substring(0, 1).toUpperCase();\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nconst UserName = ({ value, onChange, error }) => (\n  <FormControl fullWidth error={!!error}>\n    <InputLabel>Username</InputLabel>\n    <Input name=\"userName\" value={value} onChange={onChange} />\n    {!!error && <FormHelperText>{error}</FormHelperText>}\n  </FormControl>\n);\n\nexport default UserName;\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nconst FullName = ({ value, onChange }) => (\n  <FormControl fullWidth>\n    <InputLabel>Full name</InputLabel>\n    <Input name=\"fullName\" value={value} onChange={onChange} />\n  </FormControl>\n);\n\nexport default FullName;\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nconst Email = ({ value, onChange, error }) => (\n  <FormControl fullWidth error={!!error}>\n    <InputLabel>Email</InputLabel>\n    <Input type=\"email\" name=\"email\" value={value} onChange={onChange} />\n    {!!error && <FormHelperText>{error}</FormHelperText>}\n  </FormControl>\n);\n\nexport default Email;\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nconst DailyCaloriesTarget = ({ value, onChange, error }) => (\n  <FormControl fullWidth error={!!error}>\n    <InputLabel>Expected calories per day</InputLabel>\n    <Input type=\"number\" name=\"dailyCaloriesTarget\" value={value} onChange={onChange} />\n    {!!error && <FormHelperText>{error}</FormHelperText>}\n  </FormControl>\n);\n\nexport default DailyCaloriesTarget;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport classNames from 'classnames';\n\nimport { getUserInfo } from '../../store/auth/actions';\nimport { updateUser } from '../../store/users/actions';\nimport { setSnackbar } from '../../store/ui/actions';\nimport Avatar from '../../components/Avatar';\nimport isAlphanumeric from '../../utils/isAlphanumeric';\nimport isValidEmail from '../../utils/isValidEmail';\nimport UserName from './UserName';\nimport FullName from './FullName';\nimport Email from './Email';\nimport DailyCaloriesTarget from './DailyCaloriesTarget';\n\nconst Wrapper = styled.div`\n  max-width: 400px;\n  width: 100%;\n  margin: 30px auto 0;\n\n  .avatar {\n    margin: 0 auto 40px;\n  }\n\n  .form-field {\n    margin: 0 auto 35px;\n  }\n\n  .blur {\n    filter: blur(2px);\n  }\n\n  .submit-container {\n    margin: 60px 0 0;\n\n    button {\n      width: 100%;\n    }\n  }\n\n  .MuiFormHelperText-root.Mui-error {\n    position: absolute;\n    bottom: -20px;\n  }\n\n  @media (max-width: 500px) {\n    padding: 0 20px;\n  }\n`;\n\nconst getCredential = name => user => (user && user[name]) || '';\n\nclass Profile extends React.PureComponent {\n  state = {\n    isBusy: true,\n    fullName: getCredential('fullName')(this.props.user),\n    userName: getCredential('userName')(this.props.user),\n    email: getCredential('email')(this.props.user),\n    dailyCaloriesTarget: getCredential('dailyCaloriesTarget')(this.props.user) || 1,\n    errors: {}\n  };\n\n  componentDidMount() {\n    this.fetchCurrentUser();\n  }\n\n  fetchCurrentUser = () => {\n    this.props.getUserInfo({\n      onSuccess: () => this.setState({ isBusy: false }),\n      onFailure: () => {\n        this.setState({ isBusy: false }, () => {\n          this.props.setSnackbar('Error during fetching user. Please refresh the page');\n        });\n      }\n    });\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n\n    if (name === 'dailyCaloriesTarget') {\n      return this.setState(prevState => ({\n        [name]: value && value < 0 ? 1 : value,\n        errors: { ...prevState.errors, [name]: '' }\n      }));\n    }\n\n    this.setState(prevState => ({\n      [name]: value,\n      errors: { ...prevState.errors, [name]: '' }\n    }));\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const { userName, email, dailyCaloriesTarget } = this.state;\n\n    if (!userName) {\n      return this.setState({\n        errors: {\n          userName: !userName ? 'Required' : ''\n        }\n      });\n    }\n\n    const isUserNameAlphanumeric = isAlphanumeric(userName);\n    const emailValid = isValidEmail(email);\n\n    if (!isUserNameAlphanumeric || (email && !emailValid) || dailyCaloriesTarget < 1) {\n      return this.setState({\n        errors: {\n          userName: !isUserNameAlphanumeric ? 'Use only alphanumeric username [A, a, 0-9]' : '',\n          email: !emailValid ? 'Email is invalid' : '',\n          dailyCaloriesTarget:\n            dailyCaloriesTarget < 1 ? 'Expected calories must be greater than zero' : ''\n        }\n      });\n    }\n\n    this.setState({ isBusy: true }, () => {\n      this.props.updateUser({\n        id: this.props.user._id,\n        userName,\n        fullName: this.state.fullName,\n        email,\n        dailyCaloriesTarget: +dailyCaloriesTarget,\n        onSuccess: this.fetchCurrentUser,\n        onFailure: errors => {\n          this.setState({ isBusy: false }, () => {\n            this.props.setSnackbar(errors.message || 'Something went wrong');\n          });\n        }\n      });\n    });\n  };\n\n  render() {\n    const { isBusy, fullName, dailyCaloriesTarget, userName, email, errors } = this.state;\n\n    return (\n      <Wrapper>\n        <div className={classNames({ blur: isBusy })}>\n          <Avatar name={userName} className=\"avatar\" />\n        </div>\n\n        <form onSubmit={this.handleSubmit}>\n          <div className={classNames('form-field', { blur: isBusy })}>\n            <UserName value={userName} error={errors.userName} onChange={this.handleInputChange} />\n          </div>\n\n          <div className={classNames('form-field', { blur: isBusy })}>\n            <FullName value={fullName} onChange={this.handleInputChange} />\n          </div>\n\n          <div className={classNames('form-field', { blur: isBusy })}>\n            <Email value={email} error={errors.email} onChange={this.handleInputChange} />\n          </div>\n\n          <div className={classNames('form-field', { blur: isBusy })}>\n            <DailyCaloriesTarget\n              value={dailyCaloriesTarget}\n              error={errors.dailyCaloriesTarget}\n              onChange={this.handleInputChange}\n            />\n          </div>\n\n          <div className={classNames('submit-container', { blur: isBusy })}>\n            <Button color=\"primary\" type=\"submit\" variant=\"contained\" disabled={isBusy}>\n              SAVE\n            </Button>\n          </div>\n        </form>\n      </Wrapper>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }) => ({ user: auth.user });\n\nexport default connect(\n  mapStateToProps,\n  { getUserInfo, updateUser, setSnackbar }\n)(Profile);\n"],"sourceRoot":""}